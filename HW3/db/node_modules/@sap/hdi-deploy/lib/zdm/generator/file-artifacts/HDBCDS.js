'use strict';

var FileArtifact = require('./FileArtifact.js');
var fs = require('fs');
var ModelArtifactFactory = require("../model-artifacts/ModelArtifactsFactory.js");
var zdmUtils = require('../../zdmUtils.js');

function HDBCDS() {
    FileArtifact.prototype.constructor.apply(this, arguments);
}

HDBCDS.prototype = Object.create(FileArtifact.prototype);
HDBCDS.prototype.constructor = HDBCDS;

HDBCDS.prototype.accept = function () {
    FileArtifact.prototype.accept.apply(this, arguments);
};

function parseCDSNamespace(content) {
    var rx = /^namespace (.*);$/gmi;
    var arr = rx.exec(content);
    if (arr !== null) {
        return arr[1];
    }
    return '';
}

function getTopLevelArtifact(that, modelArtifacts, cb) {
    var fileArtifactFileNameWithoutSuffix = that._fileNameWithoutSuffix;

    for (var i = 0; i < modelArtifacts.length; i++) {
        var modelArtifact = modelArtifacts[i];
        if (fileArtifactFileNameWithoutSuffix === modelArtifact._name) {
            return modelArtifact;
        }
    }

    cb(new Error("Error parsing artifact \"" + that._fullFilePath + "\". Could not extract top level artifact."));
}

function getContexts(content) {
    var contexts = zdmUtils.getMatches(content, /(context\s([^\s]+)\s*{)/gi, 2);
    return contexts;
}

function getEntities(content) {
    var entities = zdmUtils.getMatches(content, /(entity\s([^\s]+)\s*{)/gi, 2);
    return entities;
}

function getViews(content) {
    var views = zdmUtils.getMatches(content, /(view\s([^\s]+)\sas select from\s)/gi, 2);
    return views;
}

function getDerivedTypes(content) {
    var derivedTypes = zdmUtils.getMatches(content, /(type\s([^\s]+)\s*[{:])/gi, 2);
    return derivedTypes;
}

function getStructuredTypes(content) {
    var structuredTypes = zdmUtils.getMatches(content, /(table type\s([^\s]+)\s*{)/gi, 2);
    return structuredTypes;
}

function parseFile(that, cb) {
    if(that._isAccepted){
        return;
    }
    
    var fileContent = fs.readFileSync(that._fullFilePath, 'utf-8');
    var namespace = parseCDSNamespace(fileContent);
    that.setNamespace(namespace);

    var contextNames = getContexts(fileContent);
    var entityNames = getEntities(fileContent);
    var viewNames = getViews(fileContent);
    var derivedTypeNames = getDerivedTypes(fileContent);
    var structuredTypeNames = getStructuredTypes(fileContent);

    var modelArtifactFactory = new ModelArtifactFactory();

    var contexts = modelArtifactFactory.createContexts(contextNames);
    var entities = modelArtifactFactory.createEntities(entityNames);
    var views = modelArtifactFactory.createViews(viewNames);
    var derivedTypes = modelArtifactFactory.createDerivedTypes(derivedTypeNames);
    var structuredTypes = modelArtifactFactory.createStructuredTypes(structuredTypeNames);

    var modelArtifacts = contexts.concat(entities, views, derivedTypes, structuredTypes);

    var topLevelArtifact = getTopLevelArtifact(that, modelArtifacts, cb);
    that.setTopLevelArtifact(topLevelArtifact);

    if (topLevelArtifact._isContext) {
        topLevelArtifact.addEntities(entities);
        topLevelArtifact.addViews(views);
        topLevelArtifact.addDerivedTypes(derivedTypes);
        topLevelArtifact.addStructuredTypes(structuredTypes);
    }

    that._isAccepted = true;
}

HDBCDS.prototype.parseDataContainer = function (setFileArtifactOriginalContentForDataContainer, cb) {
    var that = this;
    parseFile(that, cb);

// Adoption guidelines for default handling of CDS files:
// 1. Extract CDS views in separate CDS file. (Deployed only in Access schema).
// 2. CDS types and CDS table types should not be used by both entities and views or procedures. Separate CDS types and CDS table types for Data schema and Access schema respectively. They can be defined in one file.
// 2.1. Data schema - Define CDS types and CDS table types which are used only by CDS entities. Do not make backward incompatible changes on Data types in next versions. (Deployed in Data and Access schemas).
// 2.2. Access schema - Define CDS types and CDS table types which are used only by procedures, views and/or table types, but not from entities. (Deployed in Data and Access schemas).
// 3. Associations defined in CDS entities can be used only by CDS views, but not by .hdbviews. In Data schema do not model associations to objects from Access schema.
// 4. CDS files containg DCL (Data Control Language) objects should be modeled only for the Access schema.

    if (that.haveEntities() && that.haveViews()) {
        return cb(new Error("File artifact \"" + that._fullFilePath + "\" contains entity and view. Entities and views should be extracted in separate CDS files. CDS entities should be modeled in the 'data' folder. CDS views should be modeled in the 'access' folder."));
    }

    if (!that.isModeledInDataFolder() && !that.haveEntities() && !that.haveStructuredTypes() && !that.haveDerivedTypes()) {
        that._logger.log("File artifact \"" + that._fullFilePath + "\" will be skipped for deployment in data container, because it does not contain CDS entity, type or table type.");
        return cb();
    }

    setFileArtifactOriginalContentForDataContainer(that);
    cb();
};

module.exports = HDBCDS;
